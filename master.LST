C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN master.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE master.c BROWSE DEBUG OBJECTEXTEND CODE

line level    source

   1          #include "reg52.h"
   2          #include "lcd.h"
   3          #include <stdio.h>
   4          typedef unsigned char uchar;
   5          typedef unsigned int uint;
   6          sbit jog_R = P1^0;
   7          sbit jog_L = P1^1;
   8          sbit start = P2^0;
   9          sbit stop = P2^1;
  10          sbit reverse = P2^2;
  11          sbit addr_up= P2^6;
  12          sbit addr_low= P2^7;
  13          sbit RS485En=P3^2;
  14          sbit freq_inc=P3^6;
  15          sbit freq_dec=P3^7;
  16          sbit set= P3^3;
  17          sbit pbutton=P3^5;
  18          sbit inc=P2^4;
  19          sbit dec=P3^4;
  20          char ADR;
  21          sbit cont = P2^3;
  22          uchar frame[] ={0x02,0x0E,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  23          uchar rx_data;
  24          bit direction;
  25          uint freq;
  26          int split=1000;
  27          #define frame_size 16
  28          uchar ReplyFrame[frame_size];
  29          uchar data_count = 0;
  30          uchar pcount=0;
  31          char pselect=0;
  32          uchar count=0;
  33          uchar Msg[7];
  34          uchar param_h,param_l,PNU;
  35          int val_select=0;
  36          int max_v;
  37          
  38          void address();
  39          void parameters();
  40          void Delay(uint itime);
  41          void address();
  42          
  43          
  44          uint match(uchar char2, uchar char1)
  45          {
  46   1         return (char2 << 8) | char1;
  47   1      }
  48          
  49          uchar BCC(uchar *frame)
  50          {
  51   1              uchar BCC_value=0;
  52   1              int i;
  53   1              for(i=0;i<frame_size-1;i++)
  54   1              {
  55   2              BCC_value ^= frame[i];
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 2   

  56   2              }
  57   1              return BCC_value;
  58   1      }
  59          uchar BCC_rx(uchar *frame)
  60          {
  61   1              uchar BCC_value=0;
  62   1              int i;
  63   1              for(i=0;i<frame_size-1;i++)
  64   1              {
  65   2              BCC_value ^= frame[i];
  66   2              }
  67   1              return BCC_value;
  68   1      } 
  69          void UART_Init()
  70          {
  71   1              TMOD = 0x21;    // Timer 1, 8-bit auto reload mode 
  72   1              TH1 = 0xEF;             // Load value for 2400 baud rate
  73   1              SCON = 0xD0;    // Mode 3, reception enable, with parity bit 
  74   1              PCON=0x80;              //double baud rate
  75   1              TR1 = 1;                // Start timer 1 
  76   1      
  77   1      }  
  78          
  79          
  80          void Transmit_data(uchar tx_data)
  81          {
  82   1               
  83   1              ACC = tx_data;
  84   1              TB8 = P;                        //Ngarkohet parity bit
  85   1              SBUF = tx_data;         // Ngarkohet karakt. ne SBUF register 
  86   1              while (TI==0);          // Pret deri sa te dergohet
  87   1              TI = 0;                     // Clear TI flag  
  88   1      }
  89          
  90          void String(char *str)
  91          {
  92   1              int i;
  93   1              for(i=0;i<frame_size-1;i++)     // Dergohet secili karakter deri ne fund te frame 
  94   1              {
  95   2                      Transmit_data(str[i]);  // Thirret funksioni transmit data 
  96   2              }
  97   1              Transmit_data(BCC(str));        
  98   1      }
  99          
 100          void Serial_ISR() interrupt 4    
 101          {
 102   1              
 103   1       if(TF0==0){
 104   2        if(RI==1){
 105   3      
 106   3              ACC = SBUF;     
 107   3              rx_data = SBUF;
 108   3              RI=0;
 109   3              if (RB8 == P)
 110   3              {
 111   4                      // pariteti eshte ne rregull per 'Even' parity systems; 
 112   4                      // pariteti gabim per 'Odd' parity systems
 113   4                      if(data_count==0){
 114   5                              if(rx_data==0x02)       //frame i ri
 115   5                              {
 116   6                                      ReplyFrame[data_count++]=rx_data;
 117   6                              }
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 3   

 118   5                              }
 119   4                      else{
 120   5                                ReplyFrame[data_count++]=rx_data;
 121   5                                if(data_count>=frame_size){
 122   6                                 
 123   6                                 if(ReplyFrame[data_count-1]==BCC_rx(ReplyFrame))
 124   6                                 {
 125   7                                 freq=match(ReplyFrame[data_count-3],ReplyFrame[data_count-2]);
 126   7                                 if(count==0){
 127   8                                       val_select=match(ReplyFrame[data_count-7],ReplyFrame[data_count-6]);
 128   8                                       }
 129   7                                 }    
 130   6                                 if(freq>10000){
 131   7                                 direction=1;
 132   7                                      freq=20000-freq;
 133   7                                 }else direction=0;
 134   6                                 data_count=0;
 135   6                                 TF0=1;
 136   6                                }     
 137   5                      } 
 138   4              }
 139   3              else
 140   3              {
 141   4                      // pariteti eshte ne rregull per 'Odd' parity systems; 
 142   4                      // pariteti gabim per 'Even' parity systems
 143   4              }
 144   3       }
 145   2       }
 146   1      } 
 147          
 148           void Timer0_ISR (void) interrupt 1   
 149          {
 150   1              
 151   1              RS485En=1;
 152   1              TH0=0xE8;
 153   1              TL0=0x1F;//2tch
 154   1              TR0=1;
 155   1              while(TF0==0);
 156   1              if(jog_R==0){
 157   2               frame[11]=0x05;frame[12]=0x7E;
 158   2              }
 159   1              else if(jog_L==0){
 160   2               frame[11]=0x06;frame[12]=0x7E;
 161   2              }
 162   1              else if(stop==0){
 163   2               frame[11]=0x04;frame[12]=0x7E;
 164   2              }
 165   1              else if(start==0){
 166   2               frame[11]=0x04;frame[12]=0x7F;
 167   2              }
 168   1              else if(reverse==0){
 169   2               frame[11]=0x0D;frame[12]=0x7F;
 170   2              }
 171   1              if(pcount==0)
 172   1              {
 173   2                  if(freq_inc==0){
 174   3                      split+=100;                     //P2009=1; //frequency decimal absolute values
 175   3                      }
 176   2                      else if(freq_dec==0){
 177   3                      split-=100;
 178   3                      }
 179   2              }
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 4   

 180   1              frame[13]=split>> 8;
 181   1              frame[14]=split& 0xFF;
 182   1      
 183   1              if(pselect!=0){
 184   2              if(count==1&&set==0){
 185   3              frame[3]=param_h;frame[4]=param_l;
 186   3              frame[5]=PNU;
 187   3              frame[9]=val_select>> 8;
 188   3              frame[10]=val_select& 0xFF;
 189   3              }
 190   2              else if(count==0){
 191   3              frame[3]=param_h;frame[4]=param_l;
 192   3              frame[5]=PNU;
 193   3              frame[9]=0;
 194   3              frame[10]=0;
 195   3              }
 196   2                      else{
 197   3                frame[3]=frame[4]=frame[5]=frame[9]=frame[10]=0;
 198   3              }
 199   2              }
 200   1              else{
 201   2                frame[3]=frame[4]=frame[5]=frame[9]=frame[10]=0;
 202   2              }
 203   1      
 204   1              frame[2]=ADR;
 205   1              String(frame);
 206   1              RS485En = 0; 
 207   1              TH0=0x00;
 208   1              TL0=0x00;
 209   1              TR0=1;
 210   1              TF0 = 0;    
 211   1      }
 212          
 213          
 214          void main()
 215          {
 216   1              ADR = 0x01;       
 217   1      
 218   1              UART_Init();
 219   1              Lcd4_Init();
 220   1              TH0=0xE8;
 221   1              TL0=0x1F;//2tch
 222   1              EA  = 1;                // Enable global interrupt 
 223   1              ES = 1;                 // Enable serial interrupt      
 224   1              ET0 = 1;         // Enable Timer0 interrupts
 225   1              TR0=1;
 226   1              RS485En = 0; // set for rx
 227   1              Lcd4_Clear();
 228   1          Lcd4_Set_Cursor(1,8);
 229   1              Lcd4_Write_String("F:");
 230   1          Lcd4_Set_Cursor(1,0);
 231   1              Lcd4_Write_String("S:");
 232   1              while(1){
 233   2      
 234   2                      address();
 235   2      
 236   2                      sprintf(Msg, "%5.2f", (float)freq/100);
 237   2                      if(direction==1){
 238   3                         Lcd4_Set_Cursor(1,10);
 239   3                         Lcd4_Write_String("-");
 240   3                      }
 241   2                      else
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 5   

 242   2                      {
 243   3                         Lcd4_Set_Cursor(1,10);
 244   3                         Lcd4_Write_String(" ");
 245   3                      }
 246   2                      Lcd4_Set_Cursor(1,11);
 247   2                      Lcd4_Write_String(Msg);
 248   2      
 249   2                      sprintf(Msg, "%3d", split/100);
 250   2                      Lcd4_Set_Cursor(1,2);
 251   2                      Lcd4_Write_String(Msg);  
 252   2      if(pbutton==0){
 253   3               Lcd4_Set_Cursor(2,0);
 254   3               pcount++;
 255   3               switch(pcount){
 256   4                 case 1:
 257   4               Lcd4_Write_String("P");
 258   4                       break;
 259   4                 default:
 260   4                       pcount=pselect=val_select=0;
 261   4               Lcd4_Write_String("            ");
 262   4                       break;
 263   4               }
 264   3               Delay(10);
 265   3      }
 266   2      if(pcount!=0){
 267   3      if(pcount==1){
 268   4      Lcd4_Set_Cursor(2,0);
 269   4               if(inc==0){
 270   5                         pselect++;
 271   5                       count=0;
 272   5                      parameters();
 273   5                      Delay(13);
 274   5                      }
 275   4              if(dec==0){
 276   5                 pselect--;
 277   5                 count = 0;
 278   5                 parameters();
 279   5                 Delay(13);
 280   5              }                
 281   4      }
 282   3      
 283   3      if(pselect!=0){
 284   4      if(cont==0){
 285   5       count++;
 286   5       Delay(10);
 287   5      } 
 288   4      if(count>1){
 289   5       count=0;
 290   5      }
 291   4      if(count==0){
 292   5      Lcd4_Set_Cursor(2,6);
 293   5      Lcd4_Write_String("      ");
 294   5      }
 295   4      if(count==1){
 296   5        if(freq_inc==0){
 297   6         val_select++;
 298   6                Delay(5);
 299   6         }
 300   5           else  if(freq_dec==0){
 301   6         val_select--;
 302   6                Delay(5);
 303   6         }
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 6   

 304   5      if(pselect==1){
 305   6      if(set==0){
 306   7            param_h=0x22;param_l=0xBC;
 307   7                }
 308   6                else {
 309   7                      param_h=0x12;param_l=0xBC;
 310   7                }
 311   6                max_v=6;        
 312   6      }
 313   5      else if(pselect==2){
 314   6      if(set==0){
 315   7            param_h=0x23;param_l=0xE8;
 316   7                }
 317   6                else{
 318   7                 param_h=0x13;param_l=0xE8;
 319   7                 }
 320   6                max_v=6; 
 321   6      }
 322   5      else if(pselect==3){
 323   6      if(set==0){
 324   7            param_h=0x20;param_l=0x0B;
 325   7                PNU=0x80;             //nese parametri >1999  bit15
 326   7                }
 327   6                else {
 328   7                      param_h=0x10;param_l=0x0B;
 329   7                PNU=0x80;             //nese parametri >1999  bit15
 330   7                }
 331   6                max_v=31;
 332   6       }
 333   5       if(val_select>max_v){
 334   6                  val_select=0;
 335   6               }
 336   5      if(val_select<0){
 337   6                  val_select=max_v;
 338   6               }
 339   5                Lcd4_Set_Cursor(2,6);
 340   5            sprintf(Msg, "%d ", val_select);
 341   5            Lcd4_Write_String(Msg);
 342   5      }
 343   4      
 344   4      }         
 345   3      }
 346   2      }
 347   1      }
 348          
 349          
 350          void Delay(uint itime)
 351          {
 352   1      uint i,j;
 353   1      for (i=0;i<itime;i++) // 1ms delay
 354   1      {
 355   2      for (j=0;j<667;j++);//667 1ms
 356   2      }
 357   1      }
 358          
 359          void address(){
 360   1                      if(addr_up==0){
 361   2                              ADR +=1;
 362   2                              Delay(8);
 363   2              }
 364   1              else if (addr_low==0){
 365   2                              ADR-=1;
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 7   

 366   2                              Delay(8);
 367   2                  }
 368   1                      if(ADR>31){
 369   2                              ADR=0;
 370   2                      }
 371   1                      if(ADR<0){
 372   2                              ADR=31;
 373   2                      }
 374   1                      sprintf(Msg, "A%Bu ",ADR);
 375   1                      Lcd4_Set_Cursor(2,13);
 376   1              Lcd4_Write_String(Msg);
 377   1      }
 378          
 379          void parameters(){
 380   1       switch(pselect){
 381   2                        case 1:
 382   2                               param_h=0x12;param_l=0xBC;
 383   2                               PNU=0x00;
 384   2                               Lcd4_Write_String("P0700:   ");
 385   2                               break;
 386   2                        case 2:
 387   2                               param_h=0x13;param_l=0xE8;
 388   2                               PNU=0x00;
 389   2                               Lcd4_Write_String("P1000:   ");
 390   2                               break;
 391   2                    case 3:
 392   2                               param_h=0x10;param_l=0x0B;
 393   2                               PNU=0x80;
 394   2                               Lcd4_Write_String("P2011:   ");
 395   2                               break;
 396   2                        case 4:
 397   2                               param_h=0x10;param_l=0x18;
 398   2                               PNU=0x80;
 399   2                               Lcd4_Write_String("r2024:   ");
 400   2                               break;
 401   2                        case 5:
 402   2                               param_h=0x10;param_l=0x19;
 403   2                               PNU=0x80;
 404   2                               Lcd4_Write_String("r2025:   ");
 405   2                               break;
 406   2                        default:
 407   2                               param_h=0x00;param_l=0x00;
 408   2                               PNU=0x00;
 409   2                               val_select=0;
 410   2                               Lcd4_Write_String("P        ");
 411   2                               break;
 412   2      
 413   2      }
 414   1      if(pselect>5){
 415   2      pselect=0;
 416   2      }
 417   1      if(pselect<0){
 418   2      pselect=6;
 419   2      }
 420   1       
 421   1      }
*** WARNING C290 IN LINE 52 OF MASTER.C: missing return value
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Lcd_Delay (BEGIN)
                                           ; SOURCE LINE # 11
;---- Variable 'itime' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 13
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0001:
0003 C3                CLR     C
0004 ED                MOV     A,R5
0005 9F                SUBB    A,R7
0006 EC                MOV     A,R4
0007 9E                SUBB    A,R6
0008 5015              JNC     ?C0007
                                           ; SOURCE LINE # 14
;---- Variable 'j' assigned to Register 'R2/R3' ----
000A E4                CLR     A
000B FB                MOV     R3,A
000C FA                MOV     R2,A
000D         ?C0004:
000D 0B                INC     R3
000E BB0001            CJNE    R3,#00H,?C0138
0011 0A                INC     R2
0012         ?C0138:
0012 EB                MOV     A,R3
0013 6450              XRL     A,#050H
0015 4A                ORL     A,R2
0016 70F5              JNZ     ?C0004
0018         ?C0003:
0018 0D                INC     R5
0019 BD0001            CJNE    R5,#00H,?C0139
001C 0C                INC     R4
001D         ?C0139:
001D 80E4              SJMP    ?C0001
                                           ; SOURCE LINE # 15
001F         ?C0007:
001F 22                RET     
             ; FUNCTION _Lcd_Delay (END)

             ; FUNCTION _Lcd4_Port (BEGIN)
                                           ; SOURCE LINE # 17
;---- Variable 'a' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 19
0000 EF                MOV     A,R7
0001 30E004            JNB     ACC.0,?C0008
                                           ; SOURCE LINE # 20
0004 D284              SETB    D4
0006 8002              SJMP    ?C0009
0008         ?C0008:
                                           ; SOURCE LINE # 22
0008 C284              CLR     D4
000A         ?C0009:
                                           ; SOURCE LINE # 24
000A EF                MOV     A,R7
000B 30E104            JNB     ACC.1,?C0010
                                           ; SOURCE LINE # 25
000E D285              SETB    D5
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 9   

0010 8002              SJMP    ?C0011
0012         ?C0010:
                                           ; SOURCE LINE # 27
0012 C285              CLR     D5
0014         ?C0011:
                                           ; SOURCE LINE # 29
0014 EF                MOV     A,R7
0015 30E204            JNB     ACC.2,?C0012
                                           ; SOURCE LINE # 30
0018 D286              SETB    D6
001A 8002              SJMP    ?C0013
001C         ?C0012:
                                           ; SOURCE LINE # 32
001C C286              CLR     D6
001E         ?C0013:
                                           ; SOURCE LINE # 34
001E EF                MOV     A,R7
001F 30E303            JNB     ACC.3,?C0014
                                           ; SOURCE LINE # 35
0022 D287              SETB    D7
0024 22                RET     
0025         ?C0014:
                                           ; SOURCE LINE # 37
0025 C287              CLR     D7
                                           ; SOURCE LINE # 38
0027         ?C0016:
0027 22                RET     
             ; FUNCTION _Lcd4_Port (END)

             ; FUNCTION L?0171 (BEGIN)
0000         L?0172:
0000 7E00              MOV     R6,#00H
0002 120000      R     LCALL   _Lcd_Delay
0005 7F03              MOV     R7,#03H
             ; FUNCTION _Lcd4_Cmd (BEGIN)
                                           ; SOURCE LINE # 39
;---- Variable 'a' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
0007 C282              CLR     RS
                                           ; SOURCE LINE # 42
0009 120000      R     LCALL   _Lcd4_Port
                                           ; SOURCE LINE # 43
000C D283              SETB    EN
                                           ; SOURCE LINE # 44
000E 7F05              MOV     R7,#05H
0010 7E00              MOV     R6,#00H
0012 120000      R     LCALL   _Lcd_Delay
                                           ; SOURCE LINE # 45
0015 C283              CLR     EN
                                           ; SOURCE LINE # 46
0017 22                RET     
             ; FUNCTION _Lcd4_Cmd (END)

             ; FUNCTION Lcd4_Clear (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 51
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 10  

0005 7F01              MOV     R7,#01H
0007 020000      R     LJMP    _Lcd4_Cmd
             ; FUNCTION Lcd4_Clear (END)

             ; FUNCTION _Lcd4_Set_Cursor (BEGIN)
                                           ; SOURCE LINE # 54
;---- Variable 'temp' assigned to Register 'R1' ----
0000 8F00        R     MOV     a,R7
0002 8D00        R     MOV     b,R5
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0004 E500        R     MOV     A,a
0006 B4010E            CJNE    A,#01H,?C0019
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
0009 E500        R     MOV     A,b
000B 2480              ADD     A,#080H
000D F9                MOV     R1,A
                                           ; SOURCE LINE # 60
000E 7804              MOV     R0,#04H
0010         ?C0140:
0010 A2E7              MOV     C,ACC.7
0012 13                RRC     A
0013 D8FB              DJNZ    R0,?C0140
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0015 8011              SJMP    ?C0152
0017         ?C0019:
                                           ; SOURCE LINE # 65
0017 E500        R     MOV     A,a
0019 B4021D            CJNE    A,#02H,?C0022
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
001C E500        R     MOV     A,b
001E 24C0              ADD     A,#0C0H
0020 F9                MOV     R1,A
                                           ; SOURCE LINE # 68
0021 7804              MOV     R0,#04H
0023         ?C0141:
0023 A2E7              MOV     C,ACC.7
0025 13                RRC     A
0026 D8FB              DJNZ    R0,?C0141
0028         ?C0152:
0028 F500        R     MOV     z,A
                                           ; SOURCE LINE # 69
002A E9                MOV     A,R1
002B 540F              ANL     A,#0FH
002D F500        R     MOV     y,A
                                           ; SOURCE LINE # 70
002F AF00        R     MOV     R7,z
0031 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 71
0034 AF00        R     MOV     R7,y
0036 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0039         ?C0022:
0039 22                RET     
             ; FUNCTION _Lcd4_Set_Cursor (END)

C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 11  

             ; FUNCTION Lcd4_Init (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _Lcd4_Port
                                           ; SOURCE LINE # 78
0005 7FAA              MOV     R7,#0AAH
                                           ; SOURCE LINE # 80
0007 120000      R     LCALL   L?0171
                                           ; SOURCE LINE # 81
000A 7F32              MOV     R7,#032H
                                           ; SOURCE LINE # 82
000C 120000      R     LCALL   L?0171
                                           ; SOURCE LINE # 83
000F 7F6E              MOV     R7,#06EH
                                           ; SOURCE LINE # 84
0011 120000      R     LCALL   L?0172
                                           ; SOURCE LINE # 86
0014 7F02              MOV     R7,#02H
0016 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 87
0019 7F02              MOV     R7,#02H
001B 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 88
001E 7F08              MOV     R7,#08H
0020 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 89
0023 E4                CLR     A
0024 FF                MOV     R7,A
0025 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 90
0028 7F0C              MOV     R7,#0CH
002A 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 91
002D E4                CLR     A
002E FF                MOV     R7,A
002F 120000      R     LCALL   _Lcd4_Cmd
                                           ; SOURCE LINE # 92
0032 7F06              MOV     R7,#06H
0034 020000      R     LJMP    _Lcd4_Cmd
             ; FUNCTION Lcd4_Init (END)

             ; FUNCTION _Lcd4_Write_Char (BEGIN)
                                           ; SOURCE LINE # 95
;---- Variable 'a' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 98
0002 EE                MOV     A,R6
0003 540F              ANL     A,#0FH
;---- Variable 'temp' assigned to Register 'R5' ----
0005 FD                MOV     R5,A
                                           ; SOURCE LINE # 99
0006 EE                MOV     A,R6
0007 54F0              ANL     A,#0F0H
0009 FF                MOV     R7,A
;---- Variable 'y' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 100
000A D282              SETB    RS
                                           ; SOURCE LINE # 101
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 12  

000C 7804              MOV     R0,#04H
000E         ?C0142:
000E A2E7              MOV     C,ACC.7
0010 13                RRC     A
0011 D8FB              DJNZ    R0,?C0142
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _Lcd4_Port
                                           ; SOURCE LINE # 102
0017 D283              SETB    EN
                                           ; SOURCE LINE # 103
0019 00                NOP     
                                           ; SOURCE LINE # 104
001A 00                NOP     
                                           ; SOURCE LINE # 105
001B C283              CLR     EN
                                           ; SOURCE LINE # 106
001D AF05              MOV     R7,AR5
001F 120000      R     LCALL   _Lcd4_Port
                                           ; SOURCE LINE # 107
0022 D283              SETB    EN
                                           ; SOURCE LINE # 108
0024 00                NOP     
                                           ; SOURCE LINE # 109
0025 00                NOP     
                                           ; SOURCE LINE # 110
0026 C283              CLR     EN
                                           ; SOURCE LINE # 111
0028 22                RET     
             ; FUNCTION _Lcd4_Write_Char (END)

             ; FUNCTION L?0173 (BEGIN)
0000         L?0174:
0000 7B00              MOV     R3,#00H
0002 7A00        R     MOV     R2,#HIGH Msg
0004 7900        R     MOV     R1,#LOW Msg
             ; FUNCTION _Lcd4_Write_String (BEGIN)
                                           ; SOURCE LINE # 113
0006 8B00        R     MOV     a,R3
0008 8A00        R     MOV     a+01H,R2
000A 8900        R     MOV     a+02H,R1
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 116
000C E4                CLR     A
000D F500        R     MOV     i,A
000F F500        R     MOV     i+01H,A
0011         ?C0025:
0011 AB00        R     MOV     R3,a
0013 AA00        R     MOV     R2,a+01H
0015 A900        R     MOV     R1,a+02H
0017 850082      R     MOV     DPL,i+01H
001A 850083      R     MOV     DPH,i
001D 120000      E     LCALL   ?C?CLDOPTR
0020 FF                MOV     R7,A
0021 600D              JZ      ?C0028
                                           ; SOURCE LINE # 117
0023 120000      R     LCALL   _Lcd4_Write_Char
0026 0500        R     INC     i+01H
0028 E500        R     MOV     A,i+01H
002A 70E5              JNZ     ?C0025
002C 0500        R     INC     i
002E         ?C0143:
002E 80E1              SJMP    ?C0025
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 13  

                                           ; SOURCE LINE # 118
0030         ?C0028:
0030 22                RET     
             ; FUNCTION _Lcd4_Write_String (END)

             ; FUNCTION _match (BEGIN)
                                           ; SOURCE LINE # 44
;---- Variable 'char1' assigned to Register 'R5' ----
;---- Variable 'char2' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0000 EF                MOV     A,R7
0001 FE                MOV     R6,A
0002 ED                MOV     A,R5
0003 FF                MOV     R7,A
                                           ; SOURCE LINE # 47
0004         ?C0029:
0004 22                RET     
             ; FUNCTION _match (END)

             ; FUNCTION _BCC (BEGIN)
                                           ; SOURCE LINE # 49
0000 8B00        R     MOV     frame,R3
0002 8A00        R     MOV     frame+01H,R2
0004 8900        R     MOV     frame+02H,R1
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0006 E4                CLR     A
0007 F500        R     MOV     BCC_value,A
                                           ; SOURCE LINE # 53
;---- Variable 'i' assigned to Register 'R6/R7' ----
0009 FF                MOV     R7,A
000A FE                MOV     R6,A
000B         ?C0030:
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
000B AB00        R     MOV     R3,frame
000D AA00        R     MOV     R2,frame+01H
000F A900        R     MOV     R1,frame+02H
0011 8F82              MOV     DPL,R7
0013 8E83              MOV     DPH,R6
0015 120000      E     LCALL   ?C?CLDOPTR
0018 6200        R     XRL     BCC_value,A
                                           ; SOURCE LINE # 56
001A 0F                INC     R7
001B BF0001            CJNE    R7,#00H,?C0144
001E 0E                INC     R6
001F         ?C0144:
001F EF                MOV     A,R7
0020 640F              XRL     A,#0FH
0022 4E                ORL     A,R6
0023 70E6              JNZ     ?C0030
0025         ?C0031:
                                           ; SOURCE LINE # 57
0025 AF00        R     MOV     R7,BCC_value
                                           ; SOURCE LINE # 58
0027         ?C0033:
0027 22                RET     
             ; FUNCTION _BCC (END)

             ; FUNCTION _BCC_rx (BEGIN)
                                           ; SOURCE LINE # 59
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 14  

0000 8B00        R     MOV     frame,R3
0002 8A00        R     MOV     frame+01H,R2
0004 8900        R     MOV     frame+02H,R1
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0006 E4                CLR     A
0007 F500        R     MOV     BCC_value,A
                                           ; SOURCE LINE # 63
;---- Variable 'i' assigned to Register 'R6/R7' ----
0009 FF                MOV     R7,A
000A FE                MOV     R6,A
000B         ?C0034:
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
000B AB00        R     MOV     R3,frame
000D AA00        R     MOV     R2,frame+01H
000F A900        R     MOV     R1,frame+02H
0011 8F82              MOV     DPL,R7
0013 8E83              MOV     DPH,R6
0015 120000      E     LCALL   ?C?CLDOPTR
0018 6200        R     XRL     BCC_value,A
                                           ; SOURCE LINE # 66
001A 0F                INC     R7
001B BF0001            CJNE    R7,#00H,?C0145
001E 0E                INC     R6
001F         ?C0145:
001F EF                MOV     A,R7
0020 640F              XRL     A,#0FH
0022 4E                ORL     A,R6
0023 70E6              JNZ     ?C0034
0025         ?C0035:
                                           ; SOURCE LINE # 67
0025 AF00        R     MOV     R7,BCC_value
                                           ; SOURCE LINE # 68
0027         ?C0037:
0027 22                RET     
             ; FUNCTION _BCC_rx (END)

             ; FUNCTION UART_Init (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
0000 758921            MOV     TMOD,#021H
                                           ; SOURCE LINE # 72
0003 758DEF            MOV     TH1,#0EFH
                                           ; SOURCE LINE # 73
0006 7598D0            MOV     SCON,#0D0H
                                           ; SOURCE LINE # 74
0009 758780            MOV     PCON,#080H
                                           ; SOURCE LINE # 75
000C D28E              SETB    TR1
                                           ; SOURCE LINE # 77
000E 22                RET     
             ; FUNCTION UART_Init (END)

             ; FUNCTION _Transmit_data (BEGIN)
                                           ; SOURCE LINE # 80
;---- Variable 'tx_data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0000 EF                MOV     A,R7
                                           ; SOURCE LINE # 84
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 15  

0001 A2D0              MOV     C,P
0003 929B              MOV     TB8,C
                                           ; SOURCE LINE # 85
0005 F599              MOV     SBUF,A
0007         ?C0039:
                                           ; SOURCE LINE # 86
0007 3099FD            JNB     TI,?C0039
000A         ?C0040:
                                           ; SOURCE LINE # 87
000A C299              CLR     TI
                                           ; SOURCE LINE # 88
000C 22                RET     
             ; FUNCTION _Transmit_data (END)

             ; FUNCTION _String (BEGIN)
                                           ; SOURCE LINE # 90
0000 8B00        R     MOV     str,R3
0002 8A00        R     MOV     str+01H,R2
0004 8900        R     MOV     str+02H,R1
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
;---- Variable 'i' assigned to Register 'R4/R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 FC                MOV     R4,A
0009         ?C0042:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0009 AB00        R     MOV     R3,str
000B AA00        R     MOV     R2,str+01H
000D A900        R     MOV     R1,str+02H
000F 8D82              MOV     DPL,R5
0011 8C83              MOV     DPH,R4
0013 120000      E     LCALL   ?C?CLDOPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _Transmit_data
                                           ; SOURCE LINE # 96
001A 0D                INC     R5
001B BD0001            CJNE    R5,#00H,?C0146
001E 0C                INC     R4
001F         ?C0146:
001F ED                MOV     A,R5
0020 640F              XRL     A,#0FH
0022 4C                ORL     A,R4
0023 70E4              JNZ     ?C0042
0025         ?C0043:
                                           ; SOURCE LINE # 97
0025 AB00        R     MOV     R3,str
0027 AA00        R     MOV     R2,str+01H
0029 A900        R     MOV     R1,str+02H
002B 120000      R     LCALL   _BCC
002E 020000      R     LJMP    _Transmit_data
             ; FUNCTION _String (END)

             ; FUNCTION Serial_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D000            MOV     PSW,#00H
000B C000              PUSH    AR0
000D C001              PUSH    AR1
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 16  

000F C002              PUSH    AR2
0011 C003              PUSH    AR3
0013 C005              PUSH    AR5
0015 C006              PUSH    AR6
0017 C007              PUSH    AR7
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 103
0019 308D03            JNB     TF0,$ + 6H
001C 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 104
001F 209803            JB      RI,$ + 6H
0022 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 106
0025 E599              MOV     A,SBUF
                                           ; SOURCE LINE # 107
0027 859900      R     MOV     rx_data,SBUF
                                           ; SOURCE LINE # 108
002A C298              CLR     RI
                                           ; SOURCE LINE # 109
002C A29A              MOV     C,RB8
002E 30D001            JNB     P,?C0147
0031 B3                CPL     C
0032         ?C0147:
0032 5003              JNC     $ + 5H
0034 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 113
0037 E500        R     MOV     A,data_count
0039 7015              JNZ     ?C0049
                                           ; SOURCE LINE # 114
003B E500        R     MOV     A,rx_data
003D 6402              XRL     A,#02H
003F 6003              JZ      $ + 5H
0041 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0044 AF00        R     MOV     R7,data_count
0046 0500        R     INC     data_count
0048 7400        R     MOV     A,#LOW ReplyFrame
004A 2F                ADD     A,R7
004B F8                MOV     R0,A
004C A600        R     MOV     @R0,rx_data
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
004E 8073              SJMP    ?C0058
0050         ?C0049:
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0050 AF00        R     MOV     R7,data_count
0052 0500        R     INC     data_count
0054 7400        R     MOV     A,#LOW ReplyFrame
0056 2F                ADD     A,R7
0057 F8                MOV     R0,A
0058 A600        R     MOV     @R0,rx_data
                                           ; SOURCE LINE # 121
005A E500        R     MOV     A,data_count
005C C3                CLR     C
005D 9410              SUBB    A,#010H
005F 4062              JC      ?C0058
                                           ; SOURCE LINE # 123
0061 7B00              MOV     R3,#00H
0063 7A00        R     MOV     R2,#HIGH ReplyFrame
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 17  

0065 7900        R     MOV     R1,#LOW ReplyFrame
0067 120000      R     LCALL   _BCC_rx
006A 7400        R     MOV     A,#LOW ReplyFrame+0FFFFH
006C 2500        R     ADD     A,data_count
006E F8                MOV     R0,A
006F E6                MOV     A,@R0
0070 6F                XRL     A,R7
0071 702E              JNZ     ?C0053
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0073 7400        R     MOV     A,#LOW ReplyFrame+0FFFDH
0075 2500        R     ADD     A,data_count
0077 F8                MOV     R0,A
0078 E6                MOV     A,@R0
0079 FF                MOV     R7,A
007A 7400        R     MOV     A,#LOW ReplyFrame+0FFFEH
007C 2500        R     ADD     A,data_count
007E F8                MOV     R0,A
007F E6                MOV     A,@R0
0080 FD                MOV     R5,A
0081 120000      R     LCALL   _match
0084 8E00        R     MOV     freq,R6
0086 8F00        R     MOV     freq+01H,R7
                                           ; SOURCE LINE # 126
0088 E500        R     MOV     A,count
008A 7015              JNZ     ?C0053
                                           ; SOURCE LINE # 127
008C 7400        R     MOV     A,#LOW ReplyFrame+0FFF9H
008E 2500        R     ADD     A,data_count
0090 F8                MOV     R0,A
0091 E6                MOV     A,@R0
0092 FF                MOV     R7,A
0093 7400        R     MOV     A,#LOW ReplyFrame+0FFFAH
0095 2500        R     ADD     A,data_count
0097 F8                MOV     R0,A
0098 E6                MOV     A,@R0
0099 FD                MOV     R5,A
009A 120000      R     LCALL   _match
009D 8E00        R     MOV     val_select,R6
009F 8F00        R     MOV     val_select+01H,R7
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
00A1         ?C0053:
                                           ; SOURCE LINE # 130
00A1 D3                SETB    C
00A2 E500        R     MOV     A,freq+01H
00A4 9410              SUBB    A,#010H
00A6 E500        R     MOV     A,freq
00A8 9427              SUBB    A,#027H
00AA 4010              JC      ?C0055
                                           ; SOURCE LINE # 131
00AC D200        R     SETB    direction
                                           ; SOURCE LINE # 132
00AE 7420              MOV     A,#020H
00B0 9500        R     SUBB    A,freq+01H
00B2 F500        R     MOV     freq+01H,A
00B4 744E              MOV     A,#04EH
00B6 9500        R     SUBB    A,freq
00B8 F500        R     MOV     freq,A
                                           ; SOURCE LINE # 133
00BA 8002              SJMP    ?C0056
00BC         ?C0055:
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 18  

00BC C200        R     CLR     direction
00BE         ?C0056:
                                           ; SOURCE LINE # 134
00BE 750000      R     MOV     data_count,#00H
                                           ; SOURCE LINE # 135
00C1 D28D              SETB    TF0
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
00C3         ?C0058:
00C3 D007              POP     AR7
00C5 D006              POP     AR6
00C7 D005              POP     AR5
00C9 D003              POP     AR3
00CB D002              POP     AR2
00CD D001              POP     AR1
00CF D000              POP     AR0
00D1 D0D0              POP     PSW
00D3 D082              POP     DPL
00D5 D083              POP     DPH
00D7 D0E0              POP     ACC
00D9 32                RETI    
             ; FUNCTION Serial_ISR (END)

             ; FUNCTION Timer0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D000            MOV     PSW,#00H
000B C000              PUSH    AR0
000D C001              PUSH    AR1
000F C002              PUSH    AR2
0011 C003              PUSH    AR3
0013 C004              PUSH    AR4
0015 C005              PUSH    AR5
0017 C006              PUSH    AR6
0019 C007              PUSH    AR7
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 151
001B D2B2              SETB    RS485En
                                           ; SOURCE LINE # 152
001D 758CE8            MOV     TH0,#0E8H
                                           ; SOURCE LINE # 153
0020 758A1F            MOV     TL0,#01FH
                                           ; SOURCE LINE # 154
0023 D28C              SETB    TR0
0025         ?C0059:
                                           ; SOURCE LINE # 155
0025 308DFD            JNB     TF0,?C0059
0028         ?C0060:
                                           ; SOURCE LINE # 156
0028 209005            JB      jog_R,?C0061
                                           ; SOURCE LINE # 157
002B 750005      R     MOV     frame+0BH,#05H
                                           ; SOURCE LINE # 158
002E 800E              SJMP    ?C0154
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 19  

0030         ?C0061:
                                           ; SOURCE LINE # 159
0030 209105            JB      jog_L,?C0063
                                           ; SOURCE LINE # 160
0033 750006      R     MOV     frame+0BH,#06H
0036         ?C0153:
                                           ; SOURCE LINE # 161
0036 8006              SJMP    ?C0154
0038         ?C0063:
                                           ; SOURCE LINE # 162
0038 20A108            JB      stop,?C0065
                                           ; SOURCE LINE # 163
003B 750004      R     MOV     frame+0BH,#04H
003E         ?C0154:
003E 75007E      R     MOV     frame+0CH,#07EH
                                           ; SOURCE LINE # 164
0041 8011              SJMP    ?C0062
0043         ?C0065:
                                           ; SOURCE LINE # 165
0043 20A005            JB      start,?C0067
                                           ; SOURCE LINE # 166
0046 750004      R     MOV     frame+0BH,#04H
                                           ; SOURCE LINE # 167
0049 8006              SJMP    ?C0155
004B         ?C0067:
                                           ; SOURCE LINE # 168
004B 20A206            JB      reverse,?C0062
                                           ; SOURCE LINE # 169
004E 75000D      R     MOV     frame+0BH,#0DH
0051         ?C0155:
0051 75007F      R     MOV     frame+0CH,#07FH
                                           ; SOURCE LINE # 170
0054         ?C0062:
                                           ; SOURCE LINE # 171
0054 E500        R     MOV     A,pcount
0056 701B              JNZ     ?C0070
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0058 20B609            JB      freq_inc,?C0071
                                           ; SOURCE LINE # 174
005B 7464              MOV     A,#064H
005D 2500        R     ADD     A,split+01H
005F F500        R     MOV     split+01H,A
0061 E4                CLR     A
                                           ; SOURCE LINE # 175
0062 800B              SJMP    ?C0156
0064         ?C0071:
                                           ; SOURCE LINE # 176
0064 20B70C            JB      freq_dec,?C0070
                                           ; SOURCE LINE # 177
0067 749C              MOV     A,#09CH
0069 2500        R     ADD     A,split+01H
006B F500        R     MOV     split+01H,A
006D 74FF              MOV     A,#0FFH
006F         ?C0156:
006F 3500        R     ADDC    A,split
0071 F500        R     MOV     split,A
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0073         ?C0070:
                                           ; SOURCE LINE # 180
0073 E500        R     MOV     A,split
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 20  

0075 FF                MOV     R7,A
0076 8F00        R     MOV     frame+0DH,R7
                                           ; SOURCE LINE # 181
0078 E500        R     MOV     A,split+01H
007A F500        R     MOV     frame+0EH,A
                                           ; SOURCE LINE # 183
007C E500        R     MOV     A,pselect
007E 602F              JZ      ?C0074
                                           ; SOURCE LINE # 184
0080 E500        R     MOV     A,count
0082 B40117            CJNE    A,#01H,?C0075
0085 20B314            JB      set,?C0075
                                           ; SOURCE LINE # 185
0088 850000      R     MOV     frame+03H,param_h
008B 850000      R     MOV     frame+04H,param_l
                                           ; SOURCE LINE # 186
008E 850000      R     MOV     frame+05H,PNU
                                           ; SOURCE LINE # 187
0091 E500        R     MOV     A,val_select
0093 FF                MOV     R7,A
0094 8F00        R     MOV     frame+09H,R7
                                           ; SOURCE LINE # 188
0096 E500        R     MOV     A,val_select+01H
0098 F500        R     MOV     frame+0AH,A
                                           ; SOURCE LINE # 189
009A 8022              SJMP    ?C0079
009C         ?C0075:
                                           ; SOURCE LINE # 190
009C E500        R     MOV     A,count
009E 700F              JNZ     ?C0157
                                           ; SOURCE LINE # 191
00A0 850000      R     MOV     frame+03H,param_h
00A3 850000      R     MOV     frame+04H,param_l
                                           ; SOURCE LINE # 192
00A6 850000      R     MOV     frame+05H,PNU
                                           ; SOURCE LINE # 193
00A9 F500        R     MOV     frame+09H,A
                                           ; SOURCE LINE # 194
00AB F500        R     MOV     frame+0AH,A
                                           ; SOURCE LINE # 195
00AD 800F              SJMP    ?C0079
00AF         ?C0074:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
00AF         ?C0157:
00AF 750000      R     MOV     frame+0AH,#00H
00B2 750000      R     MOV     frame+09H,#00H
00B5 750000      R     MOV     frame+05H,#00H
00B8 750000      R     MOV     frame+04H,#00H
00BB 750000      R     MOV     frame+03H,#00H
                                           ; SOURCE LINE # 202
00BE         ?C0079:
                                           ; SOURCE LINE # 204
00BE 850000      R     MOV     frame+02H,ADR
                                           ; SOURCE LINE # 205
00C1 7B00              MOV     R3,#00H
00C3 7A00        R     MOV     R2,#HIGH frame
00C5 7900        R     MOV     R1,#LOW frame
00C7 120000      R     LCALL   _String
                                           ; SOURCE LINE # 206
00CA C2B2              CLR     RS485En
                                           ; SOURCE LINE # 207
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 21  

00CC 758C00            MOV     TH0,#00H
                                           ; SOURCE LINE # 208
00CF 758A00            MOV     TL0,#00H
                                           ; SOURCE LINE # 209
00D2 D28C              SETB    TR0
                                           ; SOURCE LINE # 210
00D4 C28D              CLR     TF0
                                           ; SOURCE LINE # 211
00D6 D007              POP     AR7
00D8 D006              POP     AR6
00DA D005              POP     AR5
00DC D004              POP     AR4
00DE D003              POP     AR3
00E0 D002              POP     AR2
00E2 D001              POP     AR1
00E4 D000              POP     AR0
00E6 D0D0              POP     PSW
00E8 D082              POP     DPL
00EA D083              POP     DPH
00EC D0E0              POP     ACC
00EE 32                RETI    
             ; FUNCTION Timer0_ISR (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 750001      R     MOV     ADR,#01H
                                           ; SOURCE LINE # 218
0003 120000      R     LCALL   UART_Init
                                           ; SOURCE LINE # 219
0006 120000      R     LCALL   Lcd4_Init
                                           ; SOURCE LINE # 220
0009 758CE8            MOV     TH0,#0E8H
                                           ; SOURCE LINE # 221
000C 758A1F            MOV     TL0,#01FH
                                           ; SOURCE LINE # 222
000F D2AF              SETB    EA
                                           ; SOURCE LINE # 223
0011 D2AC              SETB    ES
                                           ; SOURCE LINE # 224
0013 D2A9              SETB    ET0
                                           ; SOURCE LINE # 225
0015 D28C              SETB    TR0
                                           ; SOURCE LINE # 226
0017 C2B2              CLR     RS485En
                                           ; SOURCE LINE # 227
0019 120000      R     LCALL   Lcd4_Clear
                                           ; SOURCE LINE # 228
001C 7D08              MOV     R5,#08H
001E 7F01              MOV     R7,#01H
0020 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 229
0023 7BFF              MOV     R3,#0FFH
0025 7A00        R     MOV     R2,#HIGH ?SC_0
0027 7900        R     MOV     R1,#LOW ?SC_0
0029 120000      R     LCALL   _Lcd4_Write_String
                                           ; SOURCE LINE # 230
002C E4                CLR     A
002D FD                MOV     R5,A
002E 7F01              MOV     R7,#01H
0030 120000      R     LCALL   _Lcd4_Set_Cursor
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 22  

                                           ; SOURCE LINE # 231
0033 7BFF              MOV     R3,#0FFH
0035 7A00        R     MOV     R2,#HIGH ?SC_3
0037 7900        R     MOV     R1,#LOW ?SC_3
0039 120000      R     LCALL   _Lcd4_Write_String
003C         ?C0081:
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 234
003C 120000      R     LCALL   address
                                           ; SOURCE LINE # 236
003F 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0042 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_6
0045 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_6
0048 AC00        R     MOV     R4,freq
004A AD00        R     MOV     R5,freq+01H
004C E4                CLR     A
004D 120000      E     LCALL   ?C?FCASTI
0050 E4                CLR     A
0051 FB                MOV     R3,A
0052 FA                MOV     R2,A
0053 79C8              MOV     R1,#0C8H
0055 7842              MOV     R0,#042H
0057 120000      E     LCALL   ?C?FPDIV
005A 8F00        E     MOV     ?_sprintf?BYTE+09H,R7
005C 8E00        E     MOV     ?_sprintf?BYTE+08H,R6
005E 8D00        E     MOV     ?_sprintf?BYTE+07H,R5
0060 8C00        E     MOV     ?_sprintf?BYTE+06H,R4
0062 7B00              MOV     R3,#00H
0064 7A00        R     MOV     R2,#HIGH Msg
0066 7900        R     MOV     R1,#LOW Msg
0068 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 237
006B 7D0A              MOV     R5,#0AH
006D 7F01              MOV     R7,#01H
006F 30000B      R     JNB     direction,?C0083
                                           ; SOURCE LINE # 238
0072 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 239
0075 7BFF              MOV     R3,#0FFH
0077 7A00        R     MOV     R2,#HIGH ?SC_12
0079 7900        R     MOV     R1,#LOW ?SC_12
                                           ; SOURCE LINE # 240
007B 8009              SJMP    ?C0159
007D         ?C0083:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
007D 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 244
0080 7BFF              MOV     R3,#0FFH
0082 7A00        R     MOV     R2,#HIGH ?SC_14
0084 7900        R     MOV     R1,#LOW ?SC_14
0086         ?C0159:
0086 120000      R     LCALL   _Lcd4_Write_String
                                           ; SOURCE LINE # 245
0089         ?C0084:
                                           ; SOURCE LINE # 246
0089 7D0B              MOV     R5,#0BH
008B 7F01              MOV     R7,#01H
008D 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 247
0090 120000      R     LCALL   L?0173
                                           ; SOURCE LINE # 249
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 23  

0093 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0096 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_16
0099 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_16
009C AE00        R     MOV     R6,split
009E AF00        R     MOV     R7,split+01H
00A0 7C00              MOV     R4,#00H
00A2 7D64              MOV     R5,#064H
00A4 120000      E     LCALL   ?C?SIDIV
00A7 8E00        E     MOV     ?_sprintf?BYTE+06H,R6
00A9 8F00        E     MOV     ?_sprintf?BYTE+07H,R7
00AB 7B00              MOV     R3,#00H
00AD 7A00        R     MOV     R2,#HIGH Msg
00AF 7900        R     MOV     R1,#LOW Msg
00B1 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 250
00B4 7D02              MOV     R5,#02H
00B6 7F01              MOV     R7,#01H
00B8 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 251
00BB 120000      R     LCALL   L?0173
                                           ; SOURCE LINE # 252
00BE 20B52F            JB      pbutton,?C0085
                                           ; SOURCE LINE # 253
00C1 E4                CLR     A
00C2 FD                MOV     R5,A
00C3 7F02              MOV     R7,#02H
00C5 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 254
00C8 0500        R     INC     pcount
                                           ; SOURCE LINE # 255
00CA E500        R     MOV     A,pcount
00CC 14                DEC     A
00CD 7008              JNZ     ?C0088
                                           ; SOURCE LINE # 256
00CF         ?C0087:
                                           ; SOURCE LINE # 257
00CF 7BFF              MOV     R3,#0FFH
00D1 7A00        R     MOV     R2,#HIGH ?SC_20
00D3 7900        R     MOV     R1,#LOW ?SC_20
                                           ; SOURCE LINE # 258
00D5 800F              SJMP    ?C0160
                                           ; SOURCE LINE # 259
00D7         ?C0088:
                                           ; SOURCE LINE # 260
00D7 E4                CLR     A
00D8 F500        R     MOV     val_select,A
00DA F500        R     MOV     val_select+01H,A
00DC F500        R     MOV     pselect,A
00DE F500        R     MOV     pcount,A
                                           ; SOURCE LINE # 261
00E0 7BFF              MOV     R3,#0FFH
00E2 7A00        R     MOV     R2,#HIGH ?SC_22
00E4 7900        R     MOV     R1,#LOW ?SC_22
00E6         ?C0160:
00E6 120000      R     LCALL   _Lcd4_Write_String
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
00E9         ?C0086:
                                           ; SOURCE LINE # 264
00E9 7F0A              MOV     R7,#0AH
00EB 7E00              MOV     R6,#00H
00ED 120000      R     LCALL   _Delay
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 24  

                                           ; SOURCE LINE # 265
00F0         ?C0085:
                                           ; SOURCE LINE # 266
00F0 E500        R     MOV     A,pcount
00F2 7003              JNZ     $ + 5H
00F4 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 267
00F7 6401              XRL     A,#01H
00F9 702A              JNZ     ?C0090
                                           ; SOURCE LINE # 268
00FB FD                MOV     R5,A
00FC 7F02              MOV     R7,#02H
00FE 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 269
0101 20A40F            JB      inc,?C0091
                                           ; SOURCE LINE # 270
0104 0500        R     INC     pselect
                                           ; SOURCE LINE # 271
0106 E4                CLR     A
0107 F500        R     MOV     count,A
                                           ; SOURCE LINE # 272
0109 120000      R     LCALL   parameters
                                           ; SOURCE LINE # 273
010C 7F0D              MOV     R7,#0DH
010E 7E00              MOV     R6,#00H
0110 120000      R     LCALL   _Delay
                                           ; SOURCE LINE # 274
0113         ?C0091:
                                           ; SOURCE LINE # 275
0113 20B40F            JB      dec,?C0090
                                           ; SOURCE LINE # 276
0116 1500        R     DEC     pselect
                                           ; SOURCE LINE # 277
0118 E4                CLR     A
0119 F500        R     MOV     count,A
                                           ; SOURCE LINE # 278
011B 120000      R     LCALL   parameters
                                           ; SOURCE LINE # 279
011E 7F0D              MOV     R7,#0DH
0120 7E00              MOV     R6,#00H
0122 120000      R     LCALL   _Delay
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0125         ?C0090:
                                           ; SOURCE LINE # 283
0125 E500        R     MOV     A,pselect
0127 7003              JNZ     $ + 5H
0129 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 284
012C 20A309            JB      cont,?C0094
                                           ; SOURCE LINE # 285
012F 0500        R     INC     count
                                           ; SOURCE LINE # 286
0131 7F0A              MOV     R7,#0AH
0133 7E00              MOV     R6,#00H
0135 120000      R     LCALL   _Delay
                                           ; SOURCE LINE # 287
0138         ?C0094:
                                           ; SOURCE LINE # 288
0138 E500        R     MOV     A,count
013A D3                SETB    C
013B 9401              SUBB    A,#01H
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 25  

013D 4003              JC      ?C0095
                                           ; SOURCE LINE # 289
013F E4                CLR     A
0140 F500        R     MOV     count,A
                                           ; SOURCE LINE # 290
0142         ?C0095:
                                           ; SOURCE LINE # 291
0142 E500        R     MOV     A,count
0144 7010              JNZ     ?C0096
                                           ; SOURCE LINE # 292
0146 7D06              MOV     R5,#06H
0148 7F02              MOV     R7,#02H
014A 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 293
014D 7BFF              MOV     R3,#0FFH
014F 7A00        R     MOV     R2,#HIGH ?SC_35
0151 7900        R     MOV     R1,#LOW ?SC_35
0153 120000      R     LCALL   _Lcd4_Write_String
                                           ; SOURCE LINE # 294
0156         ?C0096:
                                           ; SOURCE LINE # 295
0156 E500        R     MOV     A,count
0158 6401              XRL     A,#01H
015A 6003              JZ      $ + 5H
015C 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 296
015F 20B60A            JB      freq_inc,?C0098
                                           ; SOURCE LINE # 297
0162 0500        R     INC     val_select+01H
0164 E500        R     MOV     A,val_select+01H
0166 700F              JNZ     ?C0161
0168 0500        R     INC     val_select
016A         ?C0148:
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
016A 800B              SJMP    ?C0161
016C         ?C0098:
                                           ; SOURCE LINE # 300
016C 20B70F            JB      freq_dec,?C0099
                                           ; SOURCE LINE # 301
016F E500        R     MOV     A,val_select+01H
0171 1500        R     DEC     val_select+01H
0173 7002              JNZ     ?C0149
0175 1500        R     DEC     val_select
0177         ?C0149:
                                           ; SOURCE LINE # 302
0177         ?C0161:
0177 7F05              MOV     R7,#05H
0179 7E00              MOV     R6,#00H
017B 120000      R     LCALL   _Delay
                                           ; SOURCE LINE # 303
017E         ?C0099:
                                           ; SOURCE LINE # 304
017E E500        R     MOV     A,pselect
0180 B40110            CJNE    A,#01H,?C0101
                                           ; SOURCE LINE # 305
0183 20B305            JB      set,?C0102
                                           ; SOURCE LINE # 306
0186 750022      R     MOV     param_h,#022H
                                           ; SOURCE LINE # 307
0189 8003              SJMP    ?C0162
018B         ?C0102:
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 26  

                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
018B 750012      R     MOV     param_h,#012H
018E         ?C0162:
018E 7500BC      R     MOV     param_l,#0BCH
                                           ; SOURCE LINE # 310
0191         ?C0103:
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
0191 8013              SJMP    ?C0163
0193         ?C0101:
                                           ; SOURCE LINE # 313
0193 E500        R     MOV     A,pselect
0195 B40216            CJNE    A,#02H,?C0105
                                           ; SOURCE LINE # 314
0198 20B305            JB      set,?C0106
                                           ; SOURCE LINE # 315
019B 750023      R     MOV     param_h,#023H
                                           ; SOURCE LINE # 316
019E 8003              SJMP    ?C0164
01A0         ?C0106:
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
01A0 750013      R     MOV     param_h,#013H
01A3         ?C0164:
01A3 7500E8      R     MOV     param_l,#0E8H
                                           ; SOURCE LINE # 319
01A6         ?C0107:
                                           ; SOURCE LINE # 320
01A6         ?C0163:
01A6 750000      R     MOV     max_v,#00H
01A9 750006      R     MOV     max_v+01H,#06H
                                           ; SOURCE LINE # 321
01AC 801C              SJMP    ?C0104
01AE         ?C0105:
                                           ; SOURCE LINE # 322
01AE E500        R     MOV     A,pselect
01B0 B40317            CJNE    A,#03H,?C0104
                                           ; SOURCE LINE # 323
01B3 20B305            JB      set,?C0110
                                           ; SOURCE LINE # 324
01B6 750020      R     MOV     param_h,#020H
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
01B9 8003              SJMP    ?C0158
01BB         ?C0110:
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
01BB 750010      R     MOV     param_h,#010H
01BE         ?C0158:
01BE 75000B      R     MOV     param_l,#0BH
                                           ; SOURCE LINE # 329
01C1 750080      R     MOV     PNU,#080H
                                           ; SOURCE LINE # 330
01C4         ?C0111:
                                           ; SOURCE LINE # 331
01C4 750000      R     MOV     max_v,#00H
01C7 75001F      R     MOV     max_v+01H,#01FH
                                           ; SOURCE LINE # 332
01CA         ?C0104:
                                           ; SOURCE LINE # 333
01CA D3                SETB    C
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 27  

01CB E500        R     MOV     A,val_select+01H
01CD 9500        R     SUBB    A,max_v+01H
01CF E500        R     MOV     A,max_v
01D1 6480              XRL     A,#080H
01D3 F8                MOV     R0,A
01D4 E500        R     MOV     A,val_select
01D6 6480              XRL     A,#080H
01D8 98                SUBB    A,R0
01D9 4005              JC      ?C0112
                                           ; SOURCE LINE # 334
01DB E4                CLR     A
01DC F500        R     MOV     val_select,A
01DE F500        R     MOV     val_select+01H,A
                                           ; SOURCE LINE # 335
01E0         ?C0112:
                                           ; SOURCE LINE # 336
01E0 C3                CLR     C
01E1 E500        R     MOV     A,val_select
01E3 6480              XRL     A,#080H
01E5 9480              SUBB    A,#080H
01E7 5006              JNC     ?C0113
                                           ; SOURCE LINE # 337
01E9 850000      R     MOV     val_select,max_v
01EC 850000      R     MOV     val_select+01H,max_v+01H
                                           ; SOURCE LINE # 338
01EF         ?C0113:
                                           ; SOURCE LINE # 339
01EF 7D06              MOV     R5,#06H
01F1 7F02              MOV     R7,#02H
01F3 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 340
01F6 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
01F9 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_42
01FC 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_42
01FF 850000      E     MOV     ?_sprintf?BYTE+06H,val_select
0202 850000      E     MOV     ?_sprintf?BYTE+07H,val_select+01H
0205 7B00              MOV     R3,#00H
0207 7A00        R     MOV     R2,#HIGH Msg
0209 7900        R     MOV     R1,#LOW Msg
020B 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 341
020E 120000      R     LCALL   L?0174
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0211 020000      R     LJMP    ?C0081
             ; FUNCTION main (END)

             ; FUNCTION _Delay (BEGIN)
                                           ; SOURCE LINE # 350
;---- Variable 'itime' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 353
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0115:
0003 C3                CLR     C
0004 ED                MOV     A,R5
0005 9F                SUBB    A,R7
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 28  

0006 EC                MOV     A,R4
0007 9E                SUBB    A,R6
0008 5015              JNC     ?C0121
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
;---- Variable 'j' assigned to Register 'R2/R3' ----
000A E4                CLR     A
000B FB                MOV     R3,A
000C FA                MOV     R2,A
000D         ?C0118:
000D 0B                INC     R3
000E BB0001            CJNE    R3,#00H,?C0150
0011 0A                INC     R2
0012         ?C0150:
0012 BA02F8            CJNE    R2,#02H,?C0118
0015 BB9BF5            CJNE    R3,#09BH,?C0118
                                           ; SOURCE LINE # 356
0018         ?C0117:
0018 0D                INC     R5
0019 BD0001            CJNE    R5,#00H,?C0151
001C 0C                INC     R4
001D         ?C0151:
001D 80E4              SJMP    ?C0115
                                           ; SOURCE LINE # 357
001F         ?C0121:
001F 22                RET     
             ; FUNCTION _Delay (END)

             ; FUNCTION address (BEGIN)
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0000 20A604            JB      addr_up,?C0122
                                           ; SOURCE LINE # 361
0003 0500        R     INC     ADR
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0005 8005              SJMP    ?C0165
0007         ?C0122:
                                           ; SOURCE LINE # 364
0007 20A709            JB      addr_low,?C0123
                                           ; SOURCE LINE # 365
000A 1500        R     DEC     ADR
                                           ; SOURCE LINE # 366
000C         ?C0165:
000C 7F08              MOV     R7,#08H
000E 7E00              MOV     R6,#00H
0010 120000      R     LCALL   _Delay
                                           ; SOURCE LINE # 367
0013         ?C0123:
                                           ; SOURCE LINE # 368
0013 D3                SETB    C
0014 E500        R     MOV     A,ADR
0016 6480              XRL     A,#080H
0018 949F              SUBB    A,#09FH
001A 4003              JC      ?C0125
                                           ; SOURCE LINE # 369
001C E4                CLR     A
001D F500        R     MOV     ADR,A
                                           ; SOURCE LINE # 370
001F         ?C0125:
                                           ; SOURCE LINE # 371
001F C3                CLR     C
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 29  

0020 E500        R     MOV     A,ADR
0022 6480              XRL     A,#080H
0024 9480              SUBB    A,#080H
0026 5003              JNC     ?C0126
                                           ; SOURCE LINE # 372
0028 75001F      R     MOV     ADR,#01FH
                                           ; SOURCE LINE # 373
002B         ?C0126:
                                           ; SOURCE LINE # 374
002B 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
002E 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_46
0031 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_46
0034 850000      E     MOV     ?_sprintf?BYTE+06H,ADR
0037 7B00              MOV     R3,#00H
0039 7A00        R     MOV     R2,#HIGH Msg
003B 7900        R     MOV     R1,#LOW Msg
003D 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 375
0040 7D0D              MOV     R5,#0DH
0042 7F02              MOV     R7,#02H
0044 120000      R     LCALL   _Lcd4_Set_Cursor
                                           ; SOURCE LINE # 376
0047 7B00              MOV     R3,#00H
0049 7A00        R     MOV     R2,#HIGH Msg
004B 7900        R     MOV     R1,#LOW Msg
004D 020000      R     LJMP    _Lcd4_Write_String
             ; FUNCTION address (END)

             ; FUNCTION parameters (BEGIN)
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
0000 E500        R     MOV     A,pselect
0002 24FE              ADD     A,#0FEH
0004 601E              JZ      ?C0130
0006 14                DEC     A
0007 602C              JZ      ?C0131
0009 14                DEC     A
000A 603A              JZ      ?C0132
000C 14                DEC     A
000D 6048              JZ      ?C0133
000F 2404              ADD     A,#04H
0011 7055              JNZ     ?C0134
                                           ; SOURCE LINE # 381
0013         ?C0129:
                                           ; SOURCE LINE # 382
0013 750012      R     MOV     param_h,#012H
0016 7500BC      R     MOV     param_l,#0BCH
                                           ; SOURCE LINE # 383
0019 E4                CLR     A
001A F500        R     MOV     PNU,A
                                           ; SOURCE LINE # 384
001C 7BFF              MOV     R3,#0FFH
001E 7A00        R     MOV     R2,#HIGH ?SC_52
0020 7900        R     MOV     R1,#LOW ?SC_52
                                           ; SOURCE LINE # 385
0022 8055              SJMP    ?C0170
                                           ; SOURCE LINE # 386
0024         ?C0130:
                                           ; SOURCE LINE # 387
0024 750013      R     MOV     param_h,#013H
0027 7500E8      R     MOV     param_l,#0E8H
                                           ; SOURCE LINE # 388
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 30  

002A E4                CLR     A
002B F500        R     MOV     PNU,A
                                           ; SOURCE LINE # 389
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_62
0031 7900        R     MOV     R1,#LOW ?SC_62
0033         ?C0166:
                                           ; SOURCE LINE # 390
0033 8044              SJMP    ?C0170
                                           ; SOURCE LINE # 391
0035         ?C0131:
                                           ; SOURCE LINE # 392
0035 750010      R     MOV     param_h,#010H
0038 75000B      R     MOV     param_l,#0BH
                                           ; SOURCE LINE # 393
003B 750080      R     MOV     PNU,#080H
                                           ; SOURCE LINE # 394
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH ?SC_72
0042 7900        R     MOV     R1,#LOW ?SC_72
0044         ?C0167:
                                           ; SOURCE LINE # 395
0044 8033              SJMP    ?C0170
                                           ; SOURCE LINE # 396
0046         ?C0132:
                                           ; SOURCE LINE # 397
0046 750010      R     MOV     param_h,#010H
0049 750018      R     MOV     param_l,#018H
                                           ; SOURCE LINE # 398
004C 750080      R     MOV     PNU,#080H
                                           ; SOURCE LINE # 399
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH ?SC_82
0053 7900        R     MOV     R1,#LOW ?SC_82
0055         ?C0168:
                                           ; SOURCE LINE # 400
0055 8022              SJMP    ?C0170
                                           ; SOURCE LINE # 401
0057         ?C0133:
                                           ; SOURCE LINE # 402
0057 750010      R     MOV     param_h,#010H
005A 750019      R     MOV     param_l,#019H
                                           ; SOURCE LINE # 403
005D 750080      R     MOV     PNU,#080H
                                           ; SOURCE LINE # 404
0060 7BFF              MOV     R3,#0FFH
0062 7A00        R     MOV     R2,#HIGH ?SC_92
0064 7900        R     MOV     R1,#LOW ?SC_92
0066         ?C0169:
                                           ; SOURCE LINE # 405
0066 8011              SJMP    ?C0170
                                           ; SOURCE LINE # 406
0068         ?C0134:
                                           ; SOURCE LINE # 407
0068 E4                CLR     A
0069 F500        R     MOV     param_h,A
006B F500        R     MOV     param_l,A
                                           ; SOURCE LINE # 408
006D F500        R     MOV     PNU,A
                                           ; SOURCE LINE # 409
006F F500        R     MOV     val_select,A
0071 F500        R     MOV     val_select+01H,A
C51 COMPILER V9.01   MASTER                                                                06/24/2021 12:49:16 PAGE 31  

                                           ; SOURCE LINE # 410
0073 7BFF              MOV     R3,#0FFH
0075 7A00        R     MOV     R2,#HIGH ?SC_102
0077 7900        R     MOV     R1,#LOW ?SC_102
0079         ?C0170:
0079 120000      R     LCALL   _Lcd4_Write_String
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 413
007C         ?C0128:
                                           ; SOURCE LINE # 414
007C D3                SETB    C
007D E500        R     MOV     A,pselect
007F 6480              XRL     A,#080H
0081 9485              SUBB    A,#085H
0083 4003              JC      ?C0135
                                           ; SOURCE LINE # 415
0085 E4                CLR     A
0086 F500        R     MOV     pselect,A
                                           ; SOURCE LINE # 416
0088         ?C0135:
                                           ; SOURCE LINE # 417
0088 C3                CLR     C
0089 E500        R     MOV     A,pselect
008B 6480              XRL     A,#080H
008D 9480              SUBB    A,#080H
008F 5003              JNC     ?C0137
                                           ; SOURCE LINE # 418
0091 750006      R     MOV     pselect,#06H
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 421
0094         ?C0137:
0094 22                RET     
             ; FUNCTION parameters (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1721    ----
   CONSTANT SIZE    =    112    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
